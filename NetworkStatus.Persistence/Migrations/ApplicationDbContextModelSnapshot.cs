// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetworkStatus.Persistence.Data;

namespace NetworkStatus.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NetworkStatus.Persistence.Models.HardwareStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CpuUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RamUsage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRam")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("HardwareStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CpuUsage = 0.580643920498269m,
                            DateSent = new DateTime(2020, 2, 22, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(3709),
                            NodeId = 1,
                            RamUsage = 0.535151584788762m,
                            Temperature = 0.32787762551004m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 2,
                            CpuUsage = 0.197682405448371m,
                            DateSent = new DateTime(2020, 2, 23, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4913),
                            NodeId = 1,
                            RamUsage = 0.30649041910958m,
                            Temperature = 0.136104733746548m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 3,
                            CpuUsage = 0.354786161498533m,
                            DateSent = new DateTime(2020, 2, 24, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4962),
                            NodeId = 1,
                            RamUsage = 0.304546534225599m,
                            Temperature = 0.796247567420941m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 4,
                            CpuUsage = 0.444758564440887m,
                            DateSent = new DateTime(2020, 2, 25, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4969),
                            NodeId = 1,
                            RamUsage = 0.764379314037216m,
                            Temperature = 0.350447819731407m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 5,
                            CpuUsage = 0.241641112250109m,
                            DateSent = new DateTime(2020, 2, 26, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4974),
                            NodeId = 1,
                            RamUsage = 0.960343701280814m,
                            Temperature = 0.426200505544525m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 6,
                            CpuUsage = 0.452831974929586m,
                            DateSent = new DateTime(2020, 2, 27, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4980),
                            NodeId = 1,
                            RamUsage = 0.934128552178912m,
                            Temperature = 0.154218471215208m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 7,
                            CpuUsage = 0.0120031316820547m,
                            DateSent = new DateTime(2020, 2, 28, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4986),
                            NodeId = 1,
                            RamUsage = 0.658594589987115m,
                            Temperature = 0.0470323930713499m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 8,
                            CpuUsage = 0.388998909568879m,
                            DateSent = new DateTime(2020, 2, 29, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4991),
                            NodeId = 1,
                            RamUsage = 0.16818913592407m,
                            Temperature = 0.140272293305151m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 9,
                            CpuUsage = 0.149812138709152m,
                            DateSent = new DateTime(2020, 3, 1, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(4997),
                            NodeId = 1,
                            RamUsage = 0.754422777683671m,
                            Temperature = 0.0250914478791372m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 10,
                            CpuUsage = 0.87412453623215m,
                            DateSent = new DateTime(2020, 3, 2, 21, 14, 45, 506, DateTimeKind.Local).AddTicks(5002),
                            NodeId = 1,
                            RamUsage = 0.664338219288894m,
                            Temperature = 0.332479488725066m,
                            TotalRam = 2147483648m
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.LinuxServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("bit");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("LinuxServiceStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSent = new DateTime(2020, 2, 22, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(6339),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 2,
                            DateSent = new DateTime(2020, 2, 23, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7471),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 3,
                            DateSent = new DateTime(2020, 2, 24, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7526),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 4,
                            DateSent = new DateTime(2020, 2, 25, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7531),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 5,
                            DateSent = new DateTime(2020, 2, 26, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7535),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 6,
                            DateSent = new DateTime(2020, 2, 27, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7538),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 7,
                            DateSent = new DateTime(2020, 2, 28, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7541),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 8,
                            DateSent = new DateTime(2020, 2, 29, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7545),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 9,
                            DateSent = new DateTime(2020, 3, 1, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7548),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 10,
                            DateSent = new DateTime(2020, 3, 2, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(7552),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.NetworkStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DownloadSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsVpn")
                        .HasColumnType("bit");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<string>("PrivateIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("NetworkStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSent = new DateTime(2020, 2, 22, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(254),
                            DownloadSpeed = 0.387793444277622m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 2,
                            DateSent = new DateTime(2020, 2, 23, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2206),
                            DownloadSpeed = 0.714188226831233m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 3,
                            DateSent = new DateTime(2020, 2, 24, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2278),
                            DownloadSpeed = 0.628562714731583m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 4,
                            DateSent = new DateTime(2020, 2, 25, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2284),
                            DownloadSpeed = 0.74022531590435m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 5,
                            DateSent = new DateTime(2020, 2, 26, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2289),
                            DownloadSpeed = 0.287769114266974m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 6,
                            DateSent = new DateTime(2020, 2, 27, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2293),
                            DownloadSpeed = 0.553525684659148m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 7,
                            DateSent = new DateTime(2020, 2, 28, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2298),
                            DownloadSpeed = 0.4848356272489m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 8,
                            DateSent = new DateTime(2020, 2, 29, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2302),
                            DownloadSpeed = 0.967623117364768m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 9,
                            DateSent = new DateTime(2020, 3, 1, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2307),
                            DownloadSpeed = 0.25221631175476m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 10,
                            DateSent = new DateTime(2020, 3, 2, 21, 14, 45, 508, DateTimeKind.Local).AddTicks(2312),
                            DownloadSpeed = 0.356594338247829m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.NodeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastPinged")
                        .HasColumnType("datetime2");

                    b.Property<string>("NodeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NodeStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastPinged = new DateTime(2020, 2, 22, 21, 14, 45, 501, DateTimeKind.Local).AddTicks(7851),
                            NodeName = "Test Node"
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.StorageStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<long>("TotalStorageSpaceBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("UsedStorageSpaceBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("StorageStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSent = new DateTime(2020, 2, 22, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(1834),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1443218607L
                        },
                        new
                        {
                            Id = 2,
                            DateSent = new DateTime(2020, 2, 23, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2894),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1733173690L
                        },
                        new
                        {
                            Id = 3,
                            DateSent = new DateTime(2020, 2, 24, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2937),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 436413020L
                        },
                        new
                        {
                            Id = 4,
                            DateSent = new DateTime(2020, 2, 25, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2942),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 616203318L
                        },
                        new
                        {
                            Id = 5,
                            DateSent = new DateTime(2020, 2, 26, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2946),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1028455509L
                        },
                        new
                        {
                            Id = 6,
                            DateSent = new DateTime(2020, 2, 27, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2950),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1061144517L
                        },
                        new
                        {
                            Id = 7,
                            DateSent = new DateTime(2020, 2, 28, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2953),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1849638825L
                        },
                        new
                        {
                            Id = 8,
                            DateSent = new DateTime(2020, 2, 29, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2957),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 897743775L
                        },
                        new
                        {
                            Id = 9,
                            DateSent = new DateTime(2020, 3, 1, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2961),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1544501219L
                        },
                        new
                        {
                            Id = 10,
                            DateSent = new DateTime(2020, 3, 2, 21, 14, 45, 509, DateTimeKind.Local).AddTicks(2964),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1744199831L
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.HardwareStatusModel", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("HardwareStatus")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_Hardware_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.LinuxServiceStatus", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("Services")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_ServiceStatus_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.NetworkStatusModel", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("Network")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_Network_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.StorageStatus", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("Storage")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_Storage_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
