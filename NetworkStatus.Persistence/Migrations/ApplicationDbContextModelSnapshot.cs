// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetworkStatus.Persistence.Data;

namespace NetworkStatus.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("NetworkStatus.Persistence.Models.HardwareStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CpuUsage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RamUsage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalRam")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("HardwareStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CpuUsage = 0.48329390375097m,
                            DateSent = new DateTime(2020, 11, 17, 21, 44, 26, 56, DateTimeKind.Local).AddTicks(9701),
                            NodeId = 1,
                            RamUsage = 0.208852175720433m,
                            Temperature = 0.2542829621836m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 2,
                            CpuUsage = 0.114092039463153m,
                            DateSent = new DateTime(2020, 11, 18, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1523),
                            NodeId = 1,
                            RamUsage = 0.263363463461103m,
                            Temperature = 0.32459349060645m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 3,
                            CpuUsage = 0.437905222381421m,
                            DateSent = new DateTime(2020, 11, 19, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1586),
                            NodeId = 1,
                            RamUsage = 0.87183145055167m,
                            Temperature = 0.670715095787642m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 4,
                            CpuUsage = 0.758213380704733m,
                            DateSent = new DateTime(2020, 11, 20, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1594),
                            NodeId = 1,
                            RamUsage = 0.267879830798078m,
                            Temperature = 0.641933014449632m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 5,
                            CpuUsage = 0.817963649899682m,
                            DateSent = new DateTime(2020, 11, 21, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1602),
                            NodeId = 1,
                            RamUsage = 0.397608822396774m,
                            Temperature = 0.613626965141682m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 6,
                            CpuUsage = 0.178433545016886m,
                            DateSent = new DateTime(2020, 11, 22, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1608),
                            NodeId = 1,
                            RamUsage = 0.554328349211406m,
                            Temperature = 0.103307935457354m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 7,
                            CpuUsage = 0.995520405469239m,
                            DateSent = new DateTime(2020, 11, 23, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1614),
                            NodeId = 1,
                            RamUsage = 0.488765093725531m,
                            Temperature = 0.590631458252031m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 8,
                            CpuUsage = 0.19158198972772m,
                            DateSent = new DateTime(2020, 11, 24, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1621),
                            NodeId = 1,
                            RamUsage = 0.0351200779132173m,
                            Temperature = 0.441340396851925m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 9,
                            CpuUsage = 0.484966098091084m,
                            DateSent = new DateTime(2020, 11, 25, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1627),
                            NodeId = 1,
                            RamUsage = 0.387735289236407m,
                            Temperature = 0.353214876425087m,
                            TotalRam = 2147483648m
                        },
                        new
                        {
                            Id = 10,
                            CpuUsage = 0.6571174592977m,
                            DateSent = new DateTime(2020, 11, 26, 21, 44, 26, 57, DateTimeKind.Local).AddTicks(1634),
                            NodeId = 1,
                            RamUsage = 0.457854005255668m,
                            Temperature = 0.884976789767378m,
                            TotalRam = 2147483648m
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.LinuxServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("LinuxServiceStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSent = new DateTime(2020, 11, 17, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(148),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 2,
                            DateSent = new DateTime(2020, 11, 18, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1845),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 3,
                            DateSent = new DateTime(2020, 11, 19, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1912),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 4,
                            DateSent = new DateTime(2020, 11, 20, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1916),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 5,
                            DateSent = new DateTime(2020, 11, 21, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1920),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 6,
                            DateSent = new DateTime(2020, 11, 22, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1923),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 7,
                            DateSent = new DateTime(2020, 11, 23, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1926),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 8,
                            DateSent = new DateTime(2020, 11, 24, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1930),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 9,
                            DateSent = new DateTime(2020, 11, 25, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1933),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        },
                        new
                        {
                            Id = 10,
                            DateSent = new DateTime(2020, 11, 26, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(1936),
                            IsRunning = true,
                            NodeId = 1,
                            ServiceName = "TestService"
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.NetworkStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DownloadSpeed")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVpn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrivateIpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicIpAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("NetworkStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSent = new DateTime(2020, 11, 17, 21, 44, 26, 59, DateTimeKind.Local).AddTicks(8458),
                            DownloadSpeed = 0.987832665903416m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 2,
                            DateSent = new DateTime(2020, 11, 18, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1281),
                            DownloadSpeed = 0.962442633678411m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 3,
                            DateSent = new DateTime(2020, 11, 19, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1452),
                            DownloadSpeed = 0.343362064260692m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 4,
                            DateSent = new DateTime(2020, 11, 20, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1459),
                            DownloadSpeed = 0.478518301843907m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 5,
                            DateSent = new DateTime(2020, 11, 21, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1464),
                            DownloadSpeed = 0.108699596537603m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 6,
                            DateSent = new DateTime(2020, 11, 22, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1469),
                            DownloadSpeed = 0.271638334855269m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 7,
                            DateSent = new DateTime(2020, 11, 23, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1535),
                            DownloadSpeed = 0.91979301484292m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 8,
                            DateSent = new DateTime(2020, 11, 24, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1541),
                            DownloadSpeed = 0.0590821323260116m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 9,
                            DateSent = new DateTime(2020, 11, 25, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1546),
                            DownloadSpeed = 0.654771542947167m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        },
                        new
                        {
                            Id = 10,
                            DateSent = new DateTime(2020, 11, 26, 21, 44, 26, 60, DateTimeKind.Local).AddTicks(1551),
                            DownloadSpeed = 0.304559786945842m,
                            IsVpn = true,
                            NodeId = 1,
                            PrivateIpAddress = "192.168.0.30",
                            PublicIpAddress = "1.1.1.1"
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.NodeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastPinged")
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NodeStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastPinged = new DateTime(2020, 11, 17, 21, 44, 26, 45, DateTimeKind.Local).AddTicks(356),
                            NodeName = "Test Node"
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.StorageStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalStorageSpaceBytes")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UsedStorageSpaceBytes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("StorageStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSent = new DateTime(2020, 11, 17, 21, 44, 26, 61, DateTimeKind.Local).AddTicks(9398),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1276009554L
                        },
                        new
                        {
                            Id = 2,
                            DateSent = new DateTime(2020, 11, 18, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1253),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1346047849L
                        },
                        new
                        {
                            Id = 3,
                            DateSent = new DateTime(2020, 11, 19, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1314),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1251731990L
                        },
                        new
                        {
                            Id = 4,
                            DateSent = new DateTime(2020, 11, 20, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1319),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1914460312L
                        },
                        new
                        {
                            Id = 5,
                            DateSent = new DateTime(2020, 11, 21, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1322),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1075023942L
                        },
                        new
                        {
                            Id = 6,
                            DateSent = new DateTime(2020, 11, 22, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1325),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 788242283L
                        },
                        new
                        {
                            Id = 7,
                            DateSent = new DateTime(2020, 11, 23, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1329),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1562396765L
                        },
                        new
                        {
                            Id = 8,
                            DateSent = new DateTime(2020, 11, 24, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1332),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 670738377L
                        },
                        new
                        {
                            Id = 9,
                            DateSent = new DateTime(2020, 11, 25, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1335),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 185897056L
                        },
                        new
                        {
                            Id = 10,
                            DateSent = new DateTime(2020, 11, 26, 21, 44, 26, 62, DateTimeKind.Local).AddTicks(1339),
                            NodeId = 1,
                            TotalStorageSpaceBytes = 10737418240L,
                            UsedStorageSpaceBytes = 1020361374L
                        });
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.HardwareStatusModel", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("HardwareStatus")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_Hardware_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.LinuxServiceStatus", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("Services")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_ServiceStatus_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.NetworkStatusModel", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("Network")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_Network_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkStatus.Persistence.Models.StorageStatus", b =>
                {
                    b.HasOne("NetworkStatus.Persistence.Models.NodeStatus", "Node")
                        .WithMany("Storage")
                        .HasForeignKey("NodeId")
                        .HasConstraintName("ForeignKey_Storage_Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
